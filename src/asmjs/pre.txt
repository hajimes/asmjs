// UMD pattern
// see https://github.com/umdjs/umd/blob/master/templates/returnExports.js
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.myAsmjsModule = factory();
  }
}(this, function () {
  'use strict';
  
  function myAsmjsModule(stdlib, foreign, heap) {
    'use asm';

    var Infinity = stdlib.Infinity;
    var NaN = stdlib.NaN;

    var abs = stdlib.Math.abs;
    var acos = stdlib.Math.acos;
    var asin = stdlib.Math.asin;
    var atan = stdlib.Math.atan;
    var atan2 = stdlib.Math.atan2;
    var ceil = stdlib.Math.ceil;
    var cos = stdlib.Math.cos;
    var exp = stdlib.Math.exp;
    var floor = stdlib.Math.floor;
    var fround = stdlib.Math.fround;
    var imul = stdlib.Math.imul;
    var log = stdlib.Math.log;
    var max = stdlib.Math.max;
    var min = stdlib.Math.min;
    var pow = stdlib.Math.pow;
    var sin = stdlib.Math.sin;
    var sqrt = stdlib.Math.sqrt;
    var tan = stdlib.Math.tan;
  
    var I1 = new stdlib.Int8Array(heap);
    var I2 = new stdlib.Int16Array(heap);
    var I4 = new stdlib.Int32Array(heap);
    var U1 = new stdlib.Uint8Array(heap);
    var U2 = new stdlib.Uint16Array(heap);
    var U4 = new stdlib.Uint32Array(heap);
    var F4 = new stdlib.Float32Array(heap);
    var F8 = new stdlib.Float64Array(heap);
